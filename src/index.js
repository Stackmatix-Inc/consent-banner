// src/index.js
(function () {
  const REGION_TO_LANG = {
    US: "en", GB: "en", AU: "en", CA: "en", IE: "en",
    FR: "fr", BE: "fr", 
    DE: "de", AT: "de", 
    CH: "de", // Switzerland - using German as default, but could be customized further
    ES: "es", MX: "es", AR: "es",
    IT: "it",
    PT: "pt", BR: "pt",
    NL: "nl",
    PL: "pl",
    SE: "sv",
    NO: "no",
    FI: "fi",
    DK: "da",
    RU: "ru",
    CN: "zh",
    JP: "ja",
    KR: "ko",
    IN: "hi",
    AE: "ar",
    SA: "ar",
    IL: "he",
    ID: "id",
    TH: "th",
    TR: "tr",
    VN: "vi",
    ZA: "en",
    NG: "en",
    EG: "ar",
    AQ: "en" // Antarctica
  };

  const DEFAULT_CONFIG = {
    theme: "dark",
    layout: "footer", // Options: "footer", "header", "inline", "modal", "interstitial"
    configurability: "full", // Options: "none", "some", "full"
    privacyPolicyUrl: "/privacy-policy",
    language: "en"
  };

  function getConfig(region) {
    const userConfig = window.__ConsentBannerConfig || {};
    
    // First try user config language
    // Then try region mapping
    // Then try HTML lang attribute
    // Finally fall back to browser language or 'en'
    const fallbackLang = userConfig.language || 
                         REGION_TO_LANG[region] || 
                         document.documentElement.lang || 
                         (navigator.language?.slice(0, 2) || "en");
    
    const config = Object.assign({}, DEFAULT_CONFIG, userConfig, { language: fallbackLang });
    console.log("[SMCB] Loaded config:", config);
    return config;
  }

  let CONFIG; // will be assigned after fetchRegion
  window.smcbConfig = () => CONFIG; // expose runtime config for debug

  const CONSENT_COOKIE_KEY = "cookie_consent_level";
  const DATA_LAYER = window.dataLayer = window.dataLayer || [];

  const I18N = {
    en: {
      description: "üç™ This website uses cookies to enhance your browsing experience and provide personalized services.",
      privacyPolicy: "Privacy Policy",
      acceptAll: "Accept All Cookies",
      denyAll: "Reject All Cookies",
      customize: "Customize Settings",
      preferences: "Cookie Preferences",
      necessary: "Essential Cookies (always enabled)",
      functionality: "Functional Cookies",
      tracking: "Analytics Cookies",
      targeting: "Marketing & Targeting Cookies",
      save: "Save Preferences",
      optOut: "Do Not Sell or Share My Personal Information",
      optOutConfirm: "You have opted out of the sale of your personal information.",
      optOutAppi: "Opt Out of Marketing Data Sharing",
      optOutPipeda: "Manage My Data Sharing Preferences",
      dismiss: "Dismiss",
      ok: "OK",
      readMore: "Read More",
      allowSelection: "Allow Selection",
      moreDetails: "More Details",
      strictlyNecessaryInfo: "These cookies are essential for the website to function properly and cannot be disabled.",
      functionalityInfo: "These cookies enable personalized features and functionality.",
      trackingInfo: "These cookies collect information about how you use our website to help us improve it.",
      targetingInfo: "These cookies are used to deliver relevant advertisements and marketing campaigns.",
      cookieMessage: "We use cookies to enhance your experience, analyze site usage, and assist in our marketing efforts. By continuing to use this site, you consent to our use of cookies.",
      privacyPreferences: "Your Privacy Preferences",
      introText: "When you visit any website, it may store or retrieve information on your browser, mostly in the form of cookies. This information might be about you, your preferences or your device and is used to make the site work properly, provide a more personalized web experience, or allow the website to analyze and improve the services offered.",
      manageSettings: "Manage your settings",
      saveSettings: "SAVE THESE SETTINGS",
      alwaysOn: "ALWAYS ON",
      on: "ON",
      off: "OFF",
      necessaryDescription: "These cookies are essential for the website to function properly and cannot be disabled.",
      functionalityDescription: "These cookies enable personalized features and functionality.",
      trackingDescription: "These cookies collect information about how you use our website to help us improve it.",
      targetingDescription: "These cookies are used to deliver relevant advertisements and marketing campaigns.",
      allowAll: "ALLOW ALL",
    },
    fr: {
      description: "üç™ Ce site utilise des cookies pour am√©liorer votre exp√©rience de navigation et fournir des services personnalis√©s.",
      privacyPolicy: "Politique de Confidentialit√©",
      acceptAll: "Accepter tous les cookies",
      denyAll: "Refuser tous les cookies",
      customize: "Personnaliser les param√®tres",
      preferences: "Pr√©f√©rences de cookies",
      necessary: "Cookies essentiels (toujours activ√©s)",
      functionality: "Cookies fonctionnels",
      tracking: "Cookies analytiques",
      targeting: "Cookies de marketing et de ciblage",
      save: "Enregistrer les pr√©f√©rences",
      optOut: "Ne pas vendre mes informations",
      optOutConfirm: "Vous avez choisi de ne pas vendre vos informations personnelles.",
      optOutAppi: "D√©sactiver le partage de donn√©es marketing",
      optOutPipeda: "G√©rer mes pr√©f√©rences de partage de donn√©es",
      dismiss: "Ignorer",
      ok: "OK",
      readMore: "Lire plus",
      allowSelection: "Autoriser la s√©lection",
      moreDetails: "Plus de d√©tails",
      strictlyNecessaryInfo: "Ces cookies sont essentiels au bon fonctionnement du site et ne peuvent pas √™tre d√©sactiv√©s.",
      functionalityInfo: "Ces cookies permettent des fonctionnalit√©s et des caract√©ristiques personnalis√©es.",
      trackingInfo: "Ces cookies collectent des informations sur la fa√ßon dont vous utilisez notre site pour nous aider √† l'am√©liorer.",
      targetingInfo: "Ces cookies sont utilis√©s pour diffuser des publicit√©s et des campagnes marketing pertinentes.",
      cookieMessage: "Nous utilisons des cookies pour am√©liorer votre exp√©rience, analyser l'utilisation du site et aider nos efforts de marketing. En continuant √† utiliser ce site, vous consentez √† notre utilisation de cookies.",
      privacyPreferences: "Vos Pr√©f√©rences de Confidentialit√©",
      introText: "Lorsque vous visitez un site web, il peut stocker ou r√©cup√©rer des informations sur votre navigateur, principalement sous forme de cookies. Ces informations peuvent concerner vous-m√™me, vos pr√©f√©rences ou votre appareil et sont utilis√©es pour faire fonctionner le site correctement, offrir une exp√©rience web plus personnalis√©e ou permettre au site d'analyser et d'am√©liorer les services offerts.",
      manageSettings: "G√©rer vos param√®tres",
      saveSettings: "ENREGISTRER CES PARAM√àTRES",
      alwaysOn: "TOUJOURS ACTIF",
      on: "ACTIF",
      off: "INACTIF",
      necessaryDescription: "Ces cookies sont essentiels au bon fonctionnement du site et ne peuvent pas √™tre d√©sactiv√©s.",
      functionalityDescription: "Ces cookies permettent des fonctionnalit√©s et des caract√©ristiques personnalis√©es.",
      trackingDescription: "Ces cookies collectent des informations sur la fa√ßon dont vous utilisez notre site pour nous aider √† l'am√©liorer.",
      targetingDescription: "Ces cookies sont utilis√©s pour diffuser des publicit√©s et des campagnes marketing pertinentes.",
      allowAll: "TOUT AUTORISER",
    },
    de: {
      description: "üç™ Diese Website verwendet Cookies, um Ihr Surferlebnis zu verbessern und personalisierte Dienste anzubieten.",
      privacyPolicy: "Datenschutzrichtlinie",
      acceptAll: "Alle Cookies akzeptieren",
      denyAll: "Alle Cookies ablehnen",
      customize: "Einstellungen anpassen",
      preferences: "Cookie-Einstellungen",
      necessary: "Essentielle Cookies (immer aktiviert)",
      functionality: "Funktionale Cookies",
      tracking: "Analyse-Cookies",
      targeting: "Marketing- und Targeting-Cookies",
      save: "Einstellungen speichern",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    es: {
      description: "üç™ Este sitio web utiliza cookies para mejorar su experiencia de navegaci√≥n y ofrecer servicios personalizados.",
      privacyPolicy: "Pol√≠tica de Privacidad",
      acceptAll: "Aceptar todas las cookies",
      denyAll: "Rechazar todas las cookies",
      customize: "Personalizar configuraci√≥n",
      preferences: "Preferencias de cookies",
      necessary: "Cookies esenciales (siempre habilitadas)",
      functionality: "Cookies funcionales",
      tracking: "Cookies anal√≠ticas",
      targeting: "Cookies de marketing y segmentaci√≥n",
      save: "Guardar preferencias",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    it: {
      description: "üç™ Questo sito utilizza i cookie per migliorare la tua esperienza di navigazione e fornire servizi personalizzati.",
      privacyPolicy: "Informativa sulla Privacy",
      acceptAll: "Accetta tutti i cookie",
      denyAll: "Rifiuta tutti i cookie",
      customize: "Personalizza impostazioni",
      preferences: "Preferenze cookie",
      necessary: "Cookie essenziali (sempre attivi)",
      functionality: "Cookie funzionali",
      tracking: "Cookie analitici",
      targeting: "Cookie di marketing e targeting",
      save: "Salva preferenze",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    pt: {
      description: "üç™ Este site usa cookies para melhorar sua experi√™ncia de navega√ß√£o e fornecer servi√ßos personalizados.",
      privacyPolicy: "Pol√≠tica de Privacidade",
      acceptAll: "Aceitar todos os cookies",
      denyAll: "Rejeitar todos os cookies",
      customize: "Personalizar configura√ß√µes",
      preferences: "Prefer√™ncias de cookies",
      necessary: "Cookies essenciais (sempre ativados)",
      functionality: "Cookies funcionais",
      tracking: "Cookies anal√≠ticos",
      targeting: "Cookies de marketing e segmenta√ß√£o",
      save: "Salvar prefer√™ncias",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    nl: {
      description: "üç™ Deze website gebruikt cookies om uw browse-ervaring te verbeteren en gepersonaliseerde diensten te leveren.",
      privacyPolicy: "Privacybeleid",
      acceptAll: "Alle cookies accepteren",
      denyAll: "Alle cookies weigeren",
      customize: "Instellingen aanpassen",
      preferences: "Cookie-voorkeuren",
      necessary: "Essenti√´le cookies (altijd ingeschakeld)",
      functionality: "Functionele cookies",
      tracking: "Analytische cookies",
      targeting: "Marketing- en targeting-cookies",
      save: "Voorkeuren opslaan",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    ru: {
      description: "üç™ –≠—Ç–æ—Ç —Å–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–π–ª—ã cookie –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥.",
      privacyPolicy: "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
      acceptAll: "–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã cookie",
      denyAll: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã cookie",
      customize: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
      preferences: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤ cookie",
      necessary: "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã cookie (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã)",
      functionality: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã cookie",
      tracking: "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã cookie",
      targeting: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ñ–∞–π–ª—ã cookie",
      save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    zh: {
      description: "üç™ Êú¨ÁΩëÁ´ô‰ΩøÁî® Cookie Êù•Â¢ûÂº∫ÊÇ®ÁöÑÊµèËßà‰ΩìÈ™åÂπ∂Êèê‰æõ‰∏™ÊÄßÂåñÊúçÂä°„ÄÇ",
      privacyPolicy: "ÈöêÁßÅÊîøÁ≠ñ",
      acceptAll: "Êé•ÂèóÊâÄÊúâ Cookie",
      denyAll: "ÊãíÁªùÊâÄÊúâ Cookie",
      customize: "Ëá™ÂÆö‰πâËÆæÁΩÆ",
      preferences: "Cookie ÂÅèÂ•ΩËÆæÁΩÆ",
      necessary: "ÂøÖË¶Å CookieÔºàÂßãÁªàÂêØÁî®Ôºâ",
      functionality: "ÂäüËÉΩÊÄß Cookie",
      tracking: "ÂàÜÊûê Cookie",
      targeting: "Ëê•ÈîÄÂíåÂÆöÂêë Cookie",
      save: "‰øùÂ≠òÂÅèÂ•ΩËÆæÁΩÆ",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    ja: {
      description: "üç™ „Åì„ÅÆ„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÅØ„ÄÅÈñ≤Ë¶ß‰ΩìÈ®ì„ÇíÂêë‰∏ä„Åï„Åõ„ÄÅ„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„Åï„Çå„Åü„Çµ„Éº„Éì„Çπ„ÇíÊèê‰æõ„Åô„Çã„Åü„ÇÅ„Å´Cookie„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
      privacyPolicy: "„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº",
      acceptAll: "„Åô„Åπ„Å¶„ÅÆCookie„ÇíÂèó„ÅëÂÖ•„Çå„Çã",
      denyAll: "„Åô„Åπ„Å¶„ÅÆCookie„ÇíÊãíÂê¶„Åô„Çã",
      customize: "Ë®≠ÂÆö„Çí„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„Åô„Çã",
      preferences: "CookieË®≠ÂÆö",
      necessary: "ÂøÖÈ†àCookieÔºàÂ∏∏„Å´ÊúâÂäπÔºâ",
      functionality: "Ê©üËÉΩCookie",
      tracking: "ÂàÜÊûêCookie",
      targeting: "„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞„Åä„Çà„Å≥„Çø„Éº„Ç≤„ÉÜ„Ç£„É≥„Ç∞Cookie",
      save: "Ë®≠ÂÆö„Çí‰øùÂ≠ò",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    pl: {
      description: "üç™ Ta strona u≈ºywa plik√≥w cookie, aby poprawiƒá Twoje do≈õwiadczenie przeglƒÖdania i dostarczaƒá spersonalizowane us≈Çugi.",
      privacyPolicy: "Polityka prywatno≈õci",
      acceptAll: "Zaakceptuj wszystkie pliki cookie",
      denyAll: "Odrzuƒá wszystkie pliki cookie",
      customize: "Dostosuj ustawienia",
      preferences: "Preferencje dotyczƒÖce plik√≥w cookie",
      necessary: "Niezbƒôdne pliki cookie (zawsze w≈ÇƒÖczone)",
      functionality: "Funkcjonalne pliki cookie",
      tracking: "Analityczne pliki cookie",
      targeting: "Marketingowe i targetujƒÖce pliki cookie",
      save: "Zapisz preferencje",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    sv: {
      description: "üç™ Denna webbplats anv√§nder cookies f√∂r att f√∂rb√§ttra din surfupplevelse och tillhandah√•lla personliga tj√§nster.",
      privacyPolicy: "Integritetspolicy",
      acceptAll: "Acceptera alla cookies",
      denyAll: "Avvisa alla cookies",
      customize: "Anpassa inst√§llningar",
      preferences: "Cookie-inst√§llningar",
      necessary: "N√∂dv√§ndiga cookies (alltid aktiverade)",
      functionality: "Funktionella cookies",
      tracking: "Analytiska cookies",
      targeting: "Marknadsf√∂rings- och m√•linriktade cookies",
      save: "Spara inst√§llningar",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    no: {
      description: "üç™ Dette nettstedet bruker informasjonskapsler for √• forbedre nettleseropplevelsen og gi personlige tjenester.",
      privacyPolicy: "Personvernpolicy",
      acceptAll: "Godta alle informasjonskapsler",
      denyAll: "Avvis alle informasjonskapsler",
      customize: "Tilpass innstillinger",
      preferences: "Innstillinger for informasjonskapsler",
      necessary: "N√∏dvendige informasjonskapsler (alltid aktivert)",
      functionality: "Funksjonelle informasjonskapsler",
      tracking: "Analytiske informasjonskapsler",
      targeting: "Markedsf√∏rings- og m√•lrettede informasjonskapsler",
      save: "Lagre innstillinger",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    fi: {
      description: "üç™ T√§m√§ sivusto k√§ytt√§√§ ev√§steit√§ parantaakseen selailukokemustasi ja tarjotakseen yksil√∂ityj√§ palveluita.",
      privacyPolicy: "Tietosuojak√§yt√§nt√∂",
      acceptAll: "Hyv√§ksy kaikki ev√§steet",
      denyAll: "Hylk√§√§ kaikki ev√§steet",
      customize: "Mukauta asetuksia",
      preferences: "Ev√§steasetukset",
      necessary: "V√§ltt√§m√§tt√∂m√§t ev√§steet (aina k√§yt√∂ss√§)",
      functionality: "Toiminnalliset ev√§steet",
      tracking: "Analytiikkaev√§steet",
      targeting: "Markkinointi- ja kohdennusev√§steet",
      save: "Tallenna asetukset",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    da: {
      description: "üç™ Denne hjemmeside bruger cookies til at forbedre din browseroplevelse og levere personlige tjenester.",
      privacyPolicy: "Privatlivspolitik",
      acceptAll: "Accepter alle cookies",
      denyAll: "Afvis alle cookies",
      customize: "Tilpas indstillinger",
      preferences: "Cookie-pr√¶ferencer",
      necessary: "N√∏dvendige cookies (altid aktiveret)",
      functionality: "Funktionelle cookies",
      tracking: "Analytiske cookies",
      targeting: "Marketing- og m√•lretningscookies",
      save: "Gem pr√¶ferencer",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    hi: {
      description: "üç™ ‡§Ø‡§π ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§Ü‡§™‡§ï‡•á ‡§¨‡•ç‡§∞‡§æ‡§â‡§º‡§ú‡§º‡§ø‡§Ç‡§ó ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§®‡•á ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§",
      privacyPolicy: "‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§®‡•Ä‡§§‡§ø",
      acceptAll: "‡§∏‡§≠‡•Ä ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç",
      denyAll: "‡§∏‡§≠‡•Ä ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç",
      customize: "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
      preferences: "‡§ï‡•Å‡§ï‡•Ä ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Å",
      necessary: "‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º (‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡§ï‡•ç‡§∑‡§Æ)",
      functionality: "‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º",
      tracking: "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º",
      targeting: "‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º",
      save: "‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Å ‡§∏‡§π‡•á‡§ú‡•á‡§Ç",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    ar: {
      description: "üç™ Ÿäÿ≥ÿ™ÿÆÿØŸÖ Ÿáÿ∞ÿß ÿßŸÑŸÖŸàŸÇÿπ ŸÖŸÑŸÅÿßÿ™ ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑ ŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿ™ÿ¨ÿ±ÿ®ÿ© ÿßŸÑÿ™ÿµŸÅÿ≠ Ÿàÿ™ŸÇÿØŸäŸÖ ÿÆÿØŸÖÿßÿ™ ŸÖÿÆÿµÿµÿ©.",
      privacyPolicy: "ÿ≥Ÿäÿßÿ≥ÿ© ÿßŸÑÿÆÿµŸàÿµŸäÿ©",
      acceptAll: "ŸÇÿ®ŸàŸÑ ÿ¨ŸÖŸäÿπ ŸÖŸÑŸÅÿßÿ™ ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑",
      denyAll: "ÿ±ŸÅÿ∂ ÿ¨ŸÖŸäÿπ ŸÖŸÑŸÅÿßÿ™ ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑",
      customize: "ÿ™ÿÆÿµŸäÿµ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™",
      preferences: "ÿ™ŸÅÿ∂ŸäŸÑÿßÿ™ ŸÖŸÑŸÅÿßÿ™ ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑",
      necessary: "ŸÖŸÑŸÅÿßÿ™ ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿßŸÑÿ∂ÿ±Ÿàÿ±Ÿäÿ© (ŸÖŸÅÿπŸÑÿ© ÿØÿßÿ¶ŸÖŸãÿß)",
      functionality: "ŸÖŸÑŸÅÿßÿ™ ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿßŸÑŸàÿ∏ŸäŸÅŸäÿ©",
      tracking: "ŸÖŸÑŸÅÿßÿ™ ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑŸäÿ©",
      targeting: "ŸÖŸÑŸÅÿßÿ™ ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑ ŸÑŸÑÿ™ÿ≥ŸàŸäŸÇ ŸàÿßŸÑÿßÿ≥ÿ™ŸáÿØÿßŸÅ",
      save: "ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ŸÅÿ∂ŸäŸÑÿßÿ™",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    he: {
      description: "üç™ ◊ê◊™◊® ◊ñ◊î ◊û◊©◊™◊û◊© ◊ë◊¢◊ï◊í◊ô◊ï◊™ ◊õ◊ì◊ô ◊ú◊©◊§◊® ◊ê◊™ ◊ó◊ï◊ï◊ô◊ô◊™ ◊î◊í◊ú◊ô◊©◊î ◊©◊ú◊ö ◊ï◊ú◊°◊§◊ß ◊©◊ô◊®◊ï◊™◊ô◊ù ◊û◊ï◊™◊ê◊û◊ô◊ù ◊ê◊ô◊©◊ô◊™.",
      privacyPolicy: "◊û◊ì◊ô◊†◊ô◊ï◊™ ◊§◊®◊ò◊ô◊ï◊™",
      acceptAll: "◊ß◊ë◊ú ◊ê◊™ ◊õ◊ú ◊î◊¢◊ï◊í◊ô◊ï◊™",
      denyAll: "◊ì◊ó◊î ◊ê◊™ ◊õ◊ú ◊î◊¢◊ï◊í◊ô◊ï◊™",
      customize: "◊î◊™◊ê◊ù ◊î◊í◊ì◊®◊ï◊™",
      preferences: "◊î◊¢◊ì◊§◊ï◊™ ◊¢◊ï◊í◊ô◊ï◊™",
      necessary: "◊¢◊ï◊í◊ô◊ï◊™ ◊ó◊ô◊ï◊†◊ô◊ï◊™ (◊™◊û◊ô◊ì ◊û◊ï◊§◊¢◊ú◊ï◊™)",
      functionality: "◊¢◊ï◊í◊ô◊ï◊™ ◊§◊ï◊†◊ß◊¶◊ô◊ï◊†◊ú◊ô◊ï◊™",
      tracking: "◊¢◊ï◊í◊ô◊ï◊™ ◊ê◊†◊ú◊ô◊ò◊ô◊ï◊™",
      targeting: "◊¢◊ï◊í◊ô◊ï◊™ ◊©◊ô◊ï◊ï◊ß ◊ï◊û◊ô◊ß◊ï◊ì",
      save: "◊©◊û◊ï◊® ◊î◊¢◊ì◊§◊ï◊™",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    id: {
      description: "üç™ Situs web ini menggunakan cookie untuk meningkatkan pengalaman penjelajahan Anda dan menyediakan layanan yang dipersonalisasi.",
      privacyPolicy: "Kebijakan Privasi",
      acceptAll: "Terima Semua Cookie",
      denyAll: "Tolak Semua Cookie",
      customize: "Sesuaikan Pengaturan",
      preferences: "Preferensi Cookie",
      necessary: "Cookie Penting (selalu aktif)",
      functionality: "Cookie Fungsional",
      tracking: "Cookie Analitik",
      targeting: "Cookie Pemasaran & Penargetan",
      save: "Simpan Preferensi",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    th: {
      description: "üç™ ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
      privacyPolicy: "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
      acceptAll: "‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
      denyAll: "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
      customize: "‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      preferences: "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ",
      necessary: "‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠)",
      functionality: "‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô",
      tracking: "‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
      targeting: "‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
      save: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    tr: {
      description: "Bu web sitesi, tarama deneyiminizi geli≈ütirmek ve ki≈üiselle≈ütirilmi≈ü hizmetler sunmak i√ßin √ßerezleri kullanƒ±r.",
      privacyPolicy: "Gizlilik Politikasƒ±",
      acceptAll: "T√ºm √áerezleri Kabul Et",
      denyAll: "T√ºm √áerezleri Reddet",
      customize: "Ayarlarƒ± √ñzelle≈ütir",
      preferences: "√áerez Tercihleri",
      necessary: "Gerekli √áerezler (her zaman etkin)",
      functionality: "ƒ∞≈ülevsel √áerezler",
      tracking: "Analitik √áerezler",
      targeting: "Pazarlama ve Hedefleme √áerezleri",
      save: "Tercihleri Kaydet",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    vi: {
      description: "üç™ Trang web n√†y s·ª≠ d·ª•ng cookie ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám duy·ªát web c·ªßa b·∫°n v√† cung c·∫•p c√°c d·ªãch v·ª• c√° nh√¢n h√≥a.",
      privacyPolicy: "Ch√≠nh s√°ch B·∫£o m·∫≠t",
      acceptAll: "Ch·∫•p nh·∫≠n T·∫•t c·∫£ Cookie",
      denyAll: "T·ª´ ch·ªëi T·∫•t c·∫£ Cookie",
      customize: "T√πy ch·ªânh C√†i ƒë·∫∑t",
      preferences: "T√πy ch·ªçn Cookie",
      necessary: "Cookie C·∫ßn thi·∫øt (lu√¥n b·∫≠t)",
      functionality: "Cookie Ch·ª©c nƒÉng",
      tracking: "Cookie Ph√¢n t√≠ch",
      targeting: "Cookie Ti·∫øp th·ªã & Nh·∫Øm m·ª•c ti√™u",
      save: "L∆∞u T√πy ch·ªçn",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    },
    ko: {
      description: "üç™ Ïù¥ ÏõπÏÇ¨Ïù¥Ìä∏Îäî Í∑ÄÌïòÏùò Î∏åÎùºÏö∞Ïßï Í≤ΩÌóòÏùÑ Ìñ•ÏÉÅÏãúÌÇ§Í≥† ÎßûÏ∂§Ìòï ÏÑúÎπÑÏä§Î•º Ï†úÍ≥µÌïòÍ∏∞ ÏúÑÌï¥ Ïø†ÌÇ§Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.",
      privacyPolicy: "Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏Ï†ïÏ±Ö",
      acceptAll: "Î™®Îì† Ïø†ÌÇ§ ÏàòÎùΩ",
      denyAll: "Î™®Îì† Ïø†ÌÇ§ Í±∞Î∂Ä",
      customize: "ÏÑ§Ï†ï ÏÇ¨Ïö©Ïûê ÏßÄÏ†ï",
      preferences: "Ïø†ÌÇ§ ÌôòÍ≤ΩÏÑ§Ï†ï",
      necessary: "ÌïÑÏàò Ïø†ÌÇ§ (Ìï≠ÏÉÅ ÌôúÏÑ±Ìôî)",
      functionality: "Í∏∞Îä• Ïø†ÌÇ§",
      tracking: "Î∂ÑÏÑù Ïø†ÌÇ§",
      targeting: "ÎßàÏºÄÌåÖ Î∞è ÌÉÄÍ≤üÌåÖ Ïø†ÌÇ§",
      save: "ÌôòÍ≤ΩÏÑ§Ï†ï Ï†ÄÏû•",
      optOut: "Do Not Sell My Information",
      optOutConfirm: "You have opted out of the sale of your personal information."
    }
  };

  function t(key) {
    const lang = CONFIG.language in I18N ? CONFIG.language : "en";
    return I18N[lang][key] || key;
  }

  async function fetchRegion() {
    // Try ipapi.co first
    try {
      console.log("[SMCB] Attempting to fetch region from ipapi.co...");
      
      const res = await fetch("https://ipapi.co/json/")
      if (!res.ok) throw new Error(`ipapi.co responded with status: ${res.status}`);
      
      const data = await res.json();
      console.log("[SMCB] Successfully used ipapi.co:", data.country_code);
      
      // Store original country code for language selection
      const countryCode = data.country_code;
      
      // GDPR countries (EU member states + UK, Switzerland, Norway, Iceland, Liechtenstein)
      const gdprCountries = ["AT","BE","BG","HR","CY","CZ","DK","EE","FI","FR","DE","GR","HU","IS","IE","IT","LV","LI","LT","LU","MT","NL","NO","PL","PT","RO","SK","SI","ES","SE","GB","UK","CH"];
      
      let region;
      if (gdprCountries.includes(countryCode)) {
        region = "GDPR";
      } else if (countryCode === "US") {
        if (data.region_code === "CA") {
          region = "CPRA";
        } else {
          region = "US";
        }
      } else if (countryCode === "BR") {
        region = "LGPD";
      } else if (countryCode === "CA") {
        region = "PIPEDA";
      } else if (countryCode === "JP") {
        region = "APPI";
      } else if (countryCode === "KR") {
        region = "PIPA";
      } else {
        region = "ROW";
      }
      
      // Return both the regulatory region and the country code
      return { region, countryCode };
    } catch (e) {
      console.log("[SMCB] Error with ipapi.co:", e.message);
      console.log("[SMCB] Falling back to ipwho.is...");
      
      // Try ipwho.is as fallback
      try {
        const res = await fetch("https://ipwho.is/");
        const data = await res.json();
        
        if (!data.success) {
          throw new Error("ipwho.is returned unsuccessful response");
        }
        
        console.log("[SMCB] Successfully used ipwho.is:", data.country_code);
        
        // GDPR countries (EU member states + UK, Switzerland, Norway, Iceland, Liechtenstein)
        const gdprCountries = ["AT","BE","BG","HR","CY","CZ","DK","EE","FI","FR","DE","GR","HU","IS","IE","IT","LV","LI","LT","LU","MT","NL","NO","PL","PT","RO","SK","SI","ES","SE","GB","UK","CH"];
        
        if (gdprCountries.includes(data.country_code)) {
          return "GDPR";
        }
        
        // US with special case for California
        if (data.country_code === "US") {
          if (data.region_code === "CA") {
            return "CPRA";
          }
          return "US";
        }
        
        // Other specific privacy regulation regions
        if (data.country_code === "BR") return "LGPD";
        if (data.country_code === "CA") return "PIPEDA";
        if (data.country_code === "JP") return "APPI";
        if (data.country_code === "KR") return "PIPA";
        
        // Default to Rest of World
        return "ROW";
      } catch (e2) {
        console.log("[SMCB] Error with ipwho.is:", e2.message);
        console.log("[SMCB] All geolocation attempts failed, using UNKNOWN");
        return "UNKNOWN";
      }
    }
  }

  function getDefaultConsentByRegion(region) {
    switch(region) {
      case "GDPR":
        return {
          functionality: false,
          tracking: false,
          targeting: false,
          optOutEnabled: false
        };
      case "CPRA": // California
        return {
          functionality: true,
          tracking: true,
          targeting: true,
          optOutEnabled: true
        };
      case "US": // Other US states
        return {
          functionality: true,
          tracking: true,
          targeting: true,
          optOutEnabled: false
        };
      case "LGPD": // Brazil
        return {
          functionality: false,
          tracking: false,
          targeting: false,
          optOutEnabled: false
        };
      case "PIPEDA": // Canada
        return {
          functionality: true,
          tracking: true,
          targeting: true,
          optOutEnabled: true
        };
      case "APPI": // Japan
        return {
          functionality: true,
          tracking: true,
          targeting: true,
          optOutEnabled: true
        };
      case "PIPA": // Korea
        return {
          functionality: false,
          tracking: false,
          targeting: false,
          optOutEnabled: false
        };
      case "ROW": // Rest of World
        return {
          functionality: false,
          tracking: false,
          targeting: false,
          optOutEnabled: false
        };
      case "UNKNOWN":
      default:
        return {
          functionality: false,
          tracking: false,
          targeting: false,
          optOutEnabled: true
        };
    }
  }

  function getStoredConsent() {
    try {
      const value = localStorage.getItem(CONSENT_COOKIE_KEY);
      return value ? JSON.parse(value) : null;
    } catch (e) {
      return null;
    }
  }

  function setConsent(consents, eventName) {
    localStorage.setItem(CONSENT_COOKIE_KEY, JSON.stringify(consents));
    document.cookie = `${CONSENT_COOKIE_KEY}=${JSON.stringify(consents)}; path=/; max-age=31536000`;
    DATA_LAYER.push({ event: eventName });
  }

  function getOptOutText(region) {
    if (region === "CPRA") {
      return t("optOut"); // Default is "Do Not Sell or Share My Personal Information"
    } else if (region === "APPI") {
      return t("optOutAppi");
    } else if (region === "PIPEDA") {
      return t("optOutPipeda");
    }
    return t("optOut");
  }

  function animateShowBanner(banner) {
    // Start with opacity 0
    banner.style.opacity = "0";
    document.body.appendChild(banner);
    
    // Force a reflow
    banner.offsetHeight;
    
    // Transition to full opacity
    banner.style.opacity = "1";
  }

  function animateHideBanner(bannerElement, callback) {
    if (!bannerElement) {
      bannerElement = document.getElementById("consent-banner");
      if (!bannerElement) {
        console.error("Cannot find banner to hide");
        if (callback) callback();
        return;
      }
    }
    
    // Animate opacity to 0
    bannerElement.style.opacity = "0";
    
    // Wait for animation to complete
    setTimeout(() => {
      if (callback) callback();
    }, 300); // Match this with the CSS transition time
  }

  function injectBanner() {
    // Create overlay for modal and interstitial only (removed inline)
    if (CONFIG.layout === "modal" || CONFIG.layout === "interstitial") {
      const overlay = document.createElement("div");
      overlay.className = "cb-overlay";
      document.body.appendChild(overlay);
    }

    // Reserve space for header to prevent layout shift
    if (CONFIG.layout === "header") {
      document.body.classList.add("has-header-notice");
      
      // Measure actual banner height and set padding accordingly
      function updateHeaderPadding() {
        const banner = document.querySelector(".cb-wrapper.header");
        if (banner) {
          const height = banner.offsetHeight;
          document.body.style.paddingTop = `${Math.max(height, 60)}px`;
        }
      }
      
      // Call multiple times to catch layout changes
      setTimeout(updateHeaderPadding, 50);
      setTimeout(updateHeaderPadding, 300);
      
      // Also update on window resize
      window.addEventListener('resize', updateHeaderPadding);
    }

    // Create banner element
    const banner = document.createElement("div");
    banner.id = "consent-banner";

    // Get stored consent or defaults
    const storedConsent = getStoredConsent() || {};
    const region = CONFIG.region || "UNKNOWN";
    const optOutEnabled = storedConsent.optOutEnabled || false;
    
    // Base wrapper with proper layout class
    let bannerHTML = `<div class="cb-wrapper ${CONFIG.theme} ${CONFIG.layout}" data-config="${CONFIG.configurability}">`;
    
    // Title for the banner
    bannerHTML += `<div class="cb-title">${t("privacyPreferences")}</div>`;
    
    // Introduction text
    bannerHTML += `<p class="cb-intro-text">${t("introText")} <a href="${CONFIG.privacyPolicyUrl}" target="_blank">${t("privacyPolicy")}</a></p>`;
    
    // Actions vary by configurability
    if (CONFIG.configurability === "none") {
      // Simplest version - just a dismiss button
      bannerHTML += `<div class="cb-actions">
        <button id="cb-dismiss" class="cb-primary-button">${t("dismiss")}</button>
      </div>`;
    } else if (CONFIG.configurability === "some") {
      if (optOutEnabled) {
        // For regions requiring opt-out (California, Japan, Canada)
        bannerHTML += `<div class="cb-actions">
          <button id="cb-ok" class="cb-primary-button">${t("ok")}</button>
          <button id="cb-opt-out">${getOptOutText(region)}</button>
        </div>`;
      } else {
        // Standard accept/deny options
        bannerHTML += `<div class="cb-actions">
          <button id="cb-accept" class="cb-primary-button">${t("acceptAll")}</button>
          <button id="cb-deny">${t("denyAll")}</button>
        </div>`;
      }
    } else { // full configurability
      // Main actions - Allow All button
      bannerHTML += `<div class="cb-actions">
        <button id="cb-accept" class="cb-primary-button">${t("allowAll")}</button>
      </div>`;
      
      // Settings accordion
      bannerHTML += `
        <div class="cb-settings-accordion">
          <div class="cb-accordion-header" id="settings-header">
            <span>${t("manageSettings")}</span>
            <span class="cb-accordion-toggle">‚ñº</span>
          </div>
          <div class="cb-accordion-content" id="settings-content" style="display: none;">
            <div class="cb-cookie-row">
              <div class="cb-cookie-info">
                <div class="cb-cookie-name">${t("necessary")}</div>
                <div class="cb-cookie-description">${t("necessaryDescription")}</div>
              </div>
              <div class="cb-toggle-container">
                <span class="cb-toggle-status">${t("alwaysOn")}</span>
              </div>
            </div>
            
            <div class="cb-cookie-row">
              <div class="cb-cookie-info">
                <div class="cb-cookie-name">${t("functionality")}</div>
                <div class="cb-cookie-description">${t("functionalityDescription")}</div>
              </div>
              <div class="cb-toggle-container">
                <label class="cb-toggle">
                  <input type="checkbox" id="cb-func">
                  <span class="cb-toggle-slider"></span>
                </label>
                <span class="cb-toggle-status" id="func-status">${t("off")}</span>
              </div>
            </div>
            
            <div class="cb-cookie-row">
              <div class="cb-cookie-info">
                <div class="cb-cookie-name">${t("tracking")}</div>
                <div class="cb-cookie-description">${t("trackingDescription")}</div>
              </div>
              <div class="cb-toggle-container">
                <label class="cb-toggle">
                  <input type="checkbox" id="cb-track">
                  <span class="cb-toggle-slider"></span>
                </label>
                <span class="cb-toggle-status" id="track-status">${t("off")}</span>
              </div>
            </div>
            
            <div class="cb-cookie-row">
              <div class="cb-cookie-info">
                <div class="cb-cookie-name">${t("targeting")}</div>
                <div class="cb-cookie-description">${t("targetingDescription")}</div>
              </div>
              <div class="cb-toggle-container">
                <label class="cb-toggle">
                  <input type="checkbox" id="cb-target">
                  <span class="cb-toggle-slider"></span>
                </label>
                <span class="cb-toggle-status" id="target-status">${t("off")}</span>
              </div>
            </div>
            
            <div class="cb-save-settings">
              <button id="cb-save" class="cb-primary-button">${t("saveSettings")}</button>
            </div>
          </div>
        </div>`;
    }
    
    bannerHTML += `</div>`; // Close wrapper div
    
    if (CONFIG.layout === "interstitial") {
      // Wrap the content in an inner container
      bannerHTML = `<div class="cb-wrapper ${CONFIG.theme} ${CONFIG.layout}" data-config="${CONFIG.configurability}">
        <div class="cb-interstitial-inner">
          ${bannerHTML.slice(bannerHTML.indexOf('>')+1, bannerHTML.lastIndexOf('</div>'))}
        </div>
      </div>`;
    }
    
    banner.innerHTML = bannerHTML;

    if (!document.body) {
      console.warn("[SMCB] document.body not ready ‚Äî banner injection skipped");
      return;
    }

    // Remove the inline-specific code from the layout selection
    if (CONFIG.layout === "inline") {
      // Skip inline layout - not supported anymore
      console.log("[SMCB] Inline layout no longer supported, falling back to modal");
      CONFIG.layout = "modal"; // Fall back to modal instead
      animateShowBanner(banner);
    } else {
      animateShowBanner(banner);
    }
    
    // Pre-check boxes based on default consent for full configurability
    if (CONFIG.configurability === "full") {
      try {
        const defaults = getDefaultConsentByRegion(region);
        
        // Set checkbox states
        const funcCheckbox = document.getElementById("cb-func");
        const trackCheckbox = document.getElementById("cb-track");
        const targetCheckbox = document.getElementById("cb-target");
        
        if (funcCheckbox) {
          funcCheckbox.checked = defaults.functionality;
          document.getElementById("func-status").textContent = defaults.functionality ? t("on") : t("off");
        }
        
        if (trackCheckbox) {
          trackCheckbox.checked = defaults.tracking;
          document.getElementById("track-status").textContent = defaults.tracking ? t("on") : t("off");
        }
        
        if (targetCheckbox) {
          targetCheckbox.checked = defaults.targeting;
          document.getElementById("target-status").textContent = defaults.targeting ? t("on") : t("off");
        }
      } catch (e) {
        console.error("Error setting toggle values:", e);
      }
    }
    
    attachHandlers();

    // After creating and injecting the banner
    setTimeout(() => {
      const bannerWrapper = document.querySelector('.cb-wrapper');
      if (bannerWrapper) {
        // Add mobile class if needed
        if (isMobileDevice()) {
          bannerWrapper.classList.add('mobile-view');
        }
        
        // Force redraw to ensure transitions work properly
        bannerWrapper.offsetHeight;
      }
    }, 10);
  }

  // Improve device detection
  function isMobileDevice() {
    const isMobile = window.innerWidth < 768 || 
           (('ontouchstart' in window) && window.innerWidth < 1024);
           
    // Add or remove mobile-view class based on viewport
    const banner = document.querySelector('.cb-wrapper');
    if (banner) {
      if (isMobile) {
        banner.classList.add('mobile-view');
      } else {
        banner.classList.remove('mobile-view');
      }
    }
    
    return isMobile;
  }

  // Add window resize handler to update mobile/desktop styling
  window.addEventListener('resize', function() {
    isMobileDevice();
  });

  // Update attachHandlers function to check for mobile
  function attachHandlers() {
    // Get a reference to the banner
    const banner = document.getElementById("consent-banner");
    if (!banner) {
      console.error("Banner element not found");
      return;
    }
    
    // Accordion functionality with mobile awareness
    const accordionHeader = document.getElementById("settings-header");
    if (accordionHeader) {
      // On mobile, ALWAYS start with accordion open and force display
      const content = document.getElementById("settings-content");
      
      // Force mobile check and set initial state
      if (isMobileDevice()) {
        if (content) {
          content.style.display = "block";
          const toggle = accordionHeader.querySelector(".cb-accordion-toggle");
          if (toggle) toggle.textContent = "‚ñ≤";
          
          // Add a class to identify it's been properly initialized for mobile
          content.classList.add('mobile-expanded');
        }
      }
      
      // Modify accordion click handler to work better on mobile
      accordionHeader.onclick = () => {
        const content = document.getElementById("settings-content");
        const toggle = accordionHeader.querySelector(".cb-accordion-toggle");
        
        if (!content) return;
        
        // On mobile devices, we still allow toggling but ensure it always works
        if (isMobileDevice()) {
          if (content.classList.contains('mobile-expanded')) {
            // Allow hiding on mobile too, if specifically clicked
            content.style.display = "none";
            content.classList.remove('mobile-expanded');
            if (toggle) toggle.textContent = "‚ñº";
          } else {
            content.style.display = "block";
            content.classList.add('mobile-expanded');
            if (toggle) toggle.textContent = "‚ñ≤";
          }
        } else {
          // Desktop behavior unchanged
          if (content.style.display === "none") {
            content.style.display = "block";
            if (toggle) toggle.textContent = "‚ñ≤";
          } else {
            content.style.display = "none";
            if (toggle) toggle.textContent = "‚ñº";
          }
        }
      };
    }
    
    // Handler for "Accept All" button
    const acceptBtn = document.getElementById("cb-accept");
    if (acceptBtn) {
      acceptBtn.onclick = () => {
        const bannerElement = document.getElementById("consent-banner");
        animateHideBanner(bannerElement, () => {
          setConsent({ 
            functionality: true, 
            tracking: true, 
            targeting: true,
            optOutEnabled: getStoredConsent()?.optOutEnabled || false 
          }, "consent_accepted");
          
          // Remove the banner element
          if (bannerElement && bannerElement.parentNode) {
            bannerElement.parentNode.removeChild(bannerElement);
          }
          
          // Remove overlay if exists
          const overlay = document.querySelector(".cb-overlay");
          if (overlay && overlay.parentNode) {
            overlay.parentNode.removeChild(overlay);
          }
          
          // Reset header spacing completely
          resetHeaderSpacing();
        });
      };
    }

    // Handler for Dismiss/OK button in "none" or "some" configurability
    const dismissBtn = document.getElementById("cb-dismiss");
    if (dismissBtn) {
      dismissBtn.onclick = () => {
        const bannerElement = document.getElementById("consent-banner");
        animateHideBanner(bannerElement, () => {
          setConsent({ 
            functionality: true, 
            tracking: true, 
            targeting: true,
            optOutEnabled: getStoredConsent()?.optOutEnabled || false 
          }, "consent_updated");
          
          // Remove the banner element
          if (bannerElement && bannerElement.parentNode) {
            bannerElement.parentNode.removeChild(bannerElement);
          }
          
          // Remove overlay if exists
          const overlay = document.querySelector(".cb-overlay");
          if (overlay && overlay.parentNode) {
            overlay.parentNode.removeChild(overlay);
          }
          
          if (CONFIG.layout === "header") {
            resetHeaderSpacing();
          }
        });
      };
    }
    
    // Handler for OK button in "some" configurability with optOutEnabled
    const okBtn = document.getElementById("cb-ok");
    if (okBtn) {
      okBtn.onclick = () => {
        const bannerElement = document.getElementById("consent-banner");
        animateHideBanner(bannerElement, () => {
          // Keep existing consent levels, just dismiss the banner
          document.getElementById("consent-banner").remove();
          
          const overlay = document.querySelector(".cb-overlay");
          if (overlay) overlay.remove();
          
          if (CONFIG.layout === "header") {
            resetHeaderSpacing();
          }
        });
      };
    }

    // Handler for "Deny All" button
    const denyBtn = document.getElementById("cb-deny");
    if (denyBtn) {
      denyBtn.onclick = () => {
        const bannerElement = document.getElementById("consent-banner");
        animateHideBanner(bannerElement, () => {
          setConsent({ 
            functionality: false, 
            tracking: false, 
            targeting: false,
            optOutEnabled: getStoredConsent()?.optOutEnabled || false 
          }, "consent_denied");
          
          // Remove the banner element
          if (bannerElement && bannerElement.parentNode) {
            bannerElement.parentNode.removeChild(bannerElement);
          }
          
          // Remove overlay if exists
          const overlay = document.querySelector(".cb-overlay");
          if (overlay && overlay.parentNode) {
            overlay.parentNode.removeChild(overlay);
          }
          
          if (CONFIG.layout === "header") {
            resetHeaderSpacing();
          }
        });
      };
    }

    // Handler for "Allow Selection" button
    const allowSelectionBtn = document.getElementById("cb-allow-selection");
    if (allowSelectionBtn) {
      allowSelectionBtn.onclick = () => {
        console.log("Allow selection clicked"); // Add debug log
        
        // Hide main content and show preferences
        const mainContent = document.getElementById("cb-main-content");
        const preferences = document.getElementById("cb-preferences");
        
        console.log("Elements found:", !!mainContent, !!preferences); // Debug
        
        if (mainContent) mainContent.style.display = "none";
        if (preferences) preferences.style.display = "block";
        
        // Pre-check boxes based on default consent
        try {
          const region = CONFIG.region || "US";
          const defaults = getDefaultConsentByRegion(region);
          document.getElementById("cb-func").checked = defaults.functionality;
          document.getElementById("cb-track").checked = defaults.tracking;
          document.getElementById("cb-target").checked = defaults.targeting;
        } catch (e) {
          console.error("Error setting checkbox values:", e);
        }
      };
    }

    // Add back button handler to return to main view
    const backBtn = document.getElementById("cb-back");
    if (backBtn) {
      backBtn.onclick = () => {
        document.getElementById("cb-preferences").style.display = "none";
        document.getElementById("cb-main-content").style.display = "block";
      };
    }

    // Handler for "Save Preferences" button
    const saveBtn = document.getElementById("cb-save");
    if (saveBtn) {
      saveBtn.onclick = () => {
        const bannerElement = document.getElementById("consent-banner");
        animateHideBanner(bannerElement, () => {
          const consents = {
            functionality: document.getElementById("cb-func").checked,
            tracking: document.getElementById("cb-track").checked,
            targeting: document.getElementById("cb-target").checked,
            optOutEnabled: getStoredConsent()?.optOutEnabled || false
          };
          setConsent(consents, "consent_updated");
          
          // Remove the banner element
          if (bannerElement && bannerElement.parentNode) {
            bannerElement.parentNode.removeChild(bannerElement);
          }
          
          // Remove overlay if exists
          const overlay = document.querySelector(".cb-overlay");
          if (overlay && overlay.parentNode) {
            overlay.parentNode.removeChild(overlay);
          }
          
          if (CONFIG.layout === "header") {
            resetHeaderSpacing();
          }
        });
      };
    }

    // Add opt-out handler if the button exists
    const optOutBtn = document.getElementById("cb-opt-out");
    if (optOutBtn) {
      optOutBtn.onclick = () => {
        const bannerElement = document.getElementById("consent-banner");
        animateHideBanner(bannerElement, () => {
          const storedConsent = getStoredConsent() || {};
          const updatedConsent = {
            ...storedConsent,
            tracking: false,
            targeting: false
          };
          
          setConsent(updatedConsent, "consent_opt_out");
          
          // Immediately close the banner
          document.getElementById("consent-banner").remove();
          
          // Remove overlay if exists
          const overlay = document.querySelector(".cb-overlay");
          if (overlay) overlay.remove();
          
          if (CONFIG.layout === "header") {
            resetHeaderSpacing();
          }
        });
      };
    }
    
    // Add handlers for toggle switches to update status text
    const toggles = ["func", "track", "target"];
    toggles.forEach(type => {
      const checkbox = document.getElementById(`cb-${type}`);
      if (checkbox) {
        checkbox.onchange = () => {
          const status = document.getElementById(`${type}-status`);
          if (status) {
            status.textContent = checkbox.checked ? t("on") : t("off");
          }
        };
      }
    });
  }

  // Add a complete header reset function
  function resetHeaderSpacing() {
    document.body.classList.remove("has-header-notice");
    document.body.style.paddingTop = "0"; // Explicit reset
    
    // Remove any inline styles potentially added to the body
    const bodyStyle = document.body.getAttribute("style") || "";
    if (bodyStyle.includes("padding-top")) {
      const newStyle = bodyStyle.replace(/padding-top:[^;]+;?/g, "");
      if (newStyle.trim()) {
        document.body.setAttribute("style", newStyle);
      } else {
        document.body.removeAttribute("style");
      }
    }
  }

  async function onReady() {
    console.log("[SMCB] onReady triggered");
    const stored = getStoredConsent();
    if (!stored) {
      const result = await fetchRegion();
      console.log("[SMCB] Region info:", result);
      
      // Use countryCode for language selection but region for regulatory defaults
      CONFIG = getConfig(result.countryCode);
      CONFIG.region = result.region; // Store the regulatory region in CONFIG
      
      const defaults = getDefaultConsentByRegion(result.region);
      console.log("[SMCB] Defaults:", defaults);
      setConsent(defaults, "consent_default");
      injectBanner();
    } else {
      const result = await fetchRegion();
      CONFIG = getConfig(result.countryCode);
      CONFIG.region = result.region;
      console.log("[SMCB] Consent already stored. Banner will not show.");
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", onReady);
  } else {
    onReady();
  }

  function addResourceHints() {
    // DNS prefetch for primary IP API
    const dnsPrefetch1 = document.createElement('link');
    dnsPrefetch1.rel = 'dns-prefetch';
    dnsPrefetch1.href = 'https://ipapi.co';
    document.head.appendChild(dnsPrefetch1);
    
    // Preconnect for primary IP API
    const preconnect1 = document.createElement('link');
    preconnect1.rel = 'preconnect';
    preconnect1.href = 'https://ipapi.co';
    document.head.appendChild(preconnect1);
    
    // DNS prefetch for fallback IP API
    const dnsPrefetch2 = document.createElement('link');
    dnsPrefetch2.rel = 'dns-prefetch';
    dnsPrefetch2.href = 'https://ipwho.is';
    document.head.appendChild(dnsPrefetch2);
    
    // Preconnect for fallback IP API
    const preconnect2 = document.createElement('link');
    preconnect2.rel = 'preconnect';
    preconnect2.href = 'https://ipwho.is';
    document.head.appendChild(preconnect2);
    
    // If using third-party consent management platforms
    if (window.__ConsentBannerConfig?.thirdParty) {
      const preload = document.createElement('link');
      preload.rel = 'preload';
      preload.href = window.__ConsentBannerConfig.thirdParty;
      preload.as = 'script';
      document.head.appendChild(preload);
    }
  }

  // Call this function early in the execution
  addResourceHints();
})();
